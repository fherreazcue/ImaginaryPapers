on:
  workflow_dispatch:
  push:
    branch:
      - '*'

jobs:
  test_strings:
    name: test strings
    runs-on: ubuntu-latest
    steps:
      - name: create string
        run: |
          MY_STRING=$(cat << EOF
          first line
          second line
          third line
          EOF
          )
          echo "MY_STRING<<EOF" >> $GITHUB_ENV
          echo "$MY_STRING" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        id: my_string
      - name: display string
        run: |
          echo "The string is: ${{ env.MY_STRING }}"

  online_example_output:
    name: generate_output
    runs-on: ubuntu-latest
    outputs:
      MY_STRING: ${{ steps.my_string.outputs.MY_STRING }}
    steps:
      - name: create string
        id: my_string
        run: |
          MY_STRING=$(cat << EOF
          first line
          second line
          third line
          EOF
          )
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "MY_STRING<<$EOF" >> $GITHUB_OUTPUT
          echo "$MY_STRING" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

  online_example_output_2:
    needs: online_example_output
    name: display output
    runs-on: ubuntu-latest
    steps:
      - name: display string
        run: |
          echo "The string is: ${{ needs.online_example_output.outputs.MY_STRING}}"

  release-info:
    runs-on: ubuntu-latest
    outputs:
      binary_download_links: ${{ steps.get_binary_download_links.outputs.binary_download_links }}
    steps:

      - name: Release info
        id: get_binary_download_links
        run: |
          binary_download_links=$(python3 -c "
          from pathlib import Path
          out_yaml = ''
          for i in ['win.exe', 'macOS', 'linux', 'win-dir.zip', 'macOS-dir.zip', 'linux-dir.zip']:
            exe_name = 'hpcflow-dummy_tag-' + i
            url = 'https://github.com/hpcflow/hpcflow-new/releases/download/dummy_tag/' + exe_name
            out_yaml += exe_name + ': ' + url + '\n'
          print(out_yaml)
          ")
          # Save multiline output
          MY_STRING=$(cat << EOF
          first line
          second line
          third line
          EOF
          )
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "binary_download_links<<$EOF" >> $GITHUB_OUTPUT
          echo "$binary_download_links" >> $GITHUB_OUTPUT
          echo "$binary_download_links" >> $GITHUB_OUTPUT

  print-output:
    needs: release-info
    runs-on: ubuntu-latest
    steps:
      - name: Print output
        run: |
          echo "The string is: ${{ needs.release-info.outputs.binary_download_links }}"
